@inject HttpClient client
@inject ISnackbar snackbar

<h2>Здравствуйте, @user.Name @user.LastName</h2>

<MudGrid>
    <MudItem>
        <h3>Личные данные</h3>
        <p>Логин: @user.UserName</p>
        <p>Имя: @user.Name</p>
        <p>Фамилия: @user.LastName</p>
    </MudItem>
    <MudItem>
        <h3>Данные об автомобиле</h3>
        <p>Марка: @user.CarBrand</p>
        <p>Модель: @user.CarModel</p>
        <p>Номер автомобиля: @user.CarNumber</p>
    </MudItem>
</MudGrid>

<h3>Ваши бронирования</h3>
@if (userBookings != null)
{
    <MudDataGrid Items="@userBookings" Bordered="true" Groupable="false" Filterable="false" SortMode="@SortMode.None">
        <Columns>
            <PropertyColumn Property="x=>x.PlaceNumber" />
            <PropertyColumn Property="x=>x.StartTime" />
            <PropertyColumn Property="x=>x.EndTime" />
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        <MudButton OnClick="()=>CancelBooking(context.Item)" Variant="Variant.Filled" Color="Color.Warning">Отменить бронирование</MudButton>
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <br />

    <MudExpansionPanels>
        <MudExpansionPanel Text="История бронирований">
            @if (archivBookings != null)
            {
                <MudTable Items="@archivBookings" Bordered="true">
                    <HeaderContent>
                        <MudTh>Номер парковочного места</MudTh>
                        <MudTh>Начало броинрования</MudTh>
                        <MudTh>Конец бронирвоания</MudTh>
                        <MudTh>Статус бронирования</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.PlaceNumber</MudTd>
                        <MudTd>@context.StartTime</MudTd>
                        <MudTd>@context.EndTime</MudTd>
                        <MudTd>@context.Status</MudTd>
                    </RowTemplate>
                </MudTable>
            }
            else
            {
                <h3>История бронирований пуста</h3>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
}
else
{
    <text>История ваших броинрвоаний пуста</text>
}


@code {
    [Parameter]
    public User user { get; set; }

    IEnumerable<Booking>? userBookings { get; set; }
    IEnumerable<Booking>? archivBookings { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            userBookings = await client.GetFromJsonAsync<IEnumerable<Booking>>("/api/booking");
            if (userBookings != null)
            {
                userBookings = userBookings.OrderBy(t => t.StartTime);
                archivBookings = userBookings.Where(u => u.UserName == user.UserName && u.IsActive == false);
                userBookings = userBookings.Where(u => u.UserName == user.UserName && u.IsActive == true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task CancelBooking(Booking booking)
    {
        booking.Status = "Отменен";
        booking.IsActive = false;
        var result = await client.PutAsJsonAsync("api/booking", booking);
        if (result.IsSuccessStatusCode)
        {
            snackbar.Add("Бронирование отменено", Severity.Success);
        }

    }

}