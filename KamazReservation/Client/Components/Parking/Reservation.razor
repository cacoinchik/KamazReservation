@inject HttpClient client
@inject NavigationManager navigate
@inject ISnackbar Snackbar

<div style="text-align: center">

    <MudButton Variant="Variant.Filled" Color="Color.Info" OnClick="@(()=>OpenReserveDrawer(Anchor.Bottom))">Забронировать</MudButton>

    <MudDrawer @bind-Open="@open" Anchor="@anchor" Elevation="1" Variant="@DrawerVariant.Temporary">

        <h5>Бронирование места</h5> <br />

        <MudDrawerContainer>

            <EditForm Model="@model" OnValidSubmit="@CreateBooking">
                <DataAnnotationsValidator />
                <div style="display: flex; flex-direction: column; align-items: center;">
                    <div style="width: 100%; max-width: 300px;">
                        <div>
                            <MudTextField Label="Номер места" Value="@PlaceNumber" For="@(()=>model.PlaceNumber)" Disabled="true" Variant="Variant.Outlined" />
                        </div>

                        <div>
                            <MudTextField Label="Имя" @bind-Value="@model.Name" For="@(()=>model.Name)" Variant="Variant.Outlined" />
                        </div>

                        <div>
                            <MudTextField Label="Фамилия" @bind-Value="@model.LastName" For="@(()=>model.LastName)" Variant="Variant.Outlined" />
                        </div>

                        <div>
                            <MudTextField Label="Марка автомобиля" @bind-Value="@model.CarBrand" For="@(()=>model.CarBrand)" Variant="Variant.Outlined" />
                        </div>

                        <div>
                            <MudTextField Label="Модель автомобиля" @bind-Value="@model.CarModel" For="@(()=>model.CarModel)" Variant="Variant.Outlined" />
                        </div>

                        <div>
                            <MudTextField Label="Номер автомобиля" @bind-Value="@model.CarNumber" For="@(()=>model.CarNumber)" Variant="Variant.Outlined" />
                        </div> <br />

                        <div>
                            <label>Дата и время начала бронирования</label>
                            <input type="datetime-local" @bind-value="@model.StartTime" />
                            <ValidationMessage For="@(()=>model.StartTime)" />
                        </div> <br />

                        <div>
                            <label>Дата и время конца бронирования</label>
                            <input type="datetime-local" @bind-value="@model.EndTime" />
                            <ValidationMessage For="@(()=>model.EndTime)" />
                        </div> <br />

                    </div>

                    <MudButton Variant="Variant.Filled" Size="Size.Medium" Color="Color.Tertiary" ButtonType="ButtonType.Submit">Забронировать</MudButton> <br />
                </div>
            </EditForm>
        </MudDrawerContainer>
    </MudDrawer>
</div>

@code {

    bool open;
    Anchor anchor;

    void OpenReserveDrawer(Anchor anchor)
    {
        if (user == null)
        {
            Snackbar.Add("Для бронирования необходимо зарегестрироваться", Severity.Error);
        }
        else
        {
            open = true;
            this.anchor = anchor;
        }
    }

    [Parameter]
    public int PlaceNumber { get; set; }

    BookingViewModel model = new BookingViewModel();

    User? user { get; set; }

    bool Error { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            user = await client.GetFromJsonAsync<User>("/api/profile");
            model.Name = user.Name;
            model.LastName = user.LastName;
            model.CarBrand = user.CarBrand;
            model.CarModel = user.CarModel;
            model.CarNumber = user.CarNumber;
            model.UserName = user.UserName;
            model.StartTime = DateTime.Today;
            model.EndTime = DateTime.Today;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task CreateBooking()
    {
        try
        {
            model.PlaceNumber = PlaceNumber;
            var result = await client.PostAsJsonAsync("api/booking", model);
            if (result.IsSuccessStatusCode)
            {
                navigate.NavigateTo("");
            }
            else
            {
                Snackbar.Add("Проверьте правильность заполнения полей, возможно место на указанное время занято", Severity.Error);
            }

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error", ex.Message);
        }
    }
}