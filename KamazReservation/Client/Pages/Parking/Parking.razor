@page "/parking"
@inject HttpClient client

<PageTitle>Схема парковки</PageTitle>

<h1>Схема парковки</h1>

@if (parkingSpaces != null)
{
    @foreach (var space in parkingSpaces)
    {
        <button class="parking-space @((space.IsOccupied) ? "occupied" : "free")" @onclick="()=>ShowInfo(space)">@space.Number</button>
    }
}
else
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}


@if (isActive)
{
    if (!ps.IsOccupied)
    {
        <h2>Сейчас это место свободно</h2>
    }

    <BookingsInfo ps="@ps" selectDate="@DateTime.Today" />

    <Reservation PlaceNumber="@ps.Number" />
}


@code {

    IEnumerable<ParkingSpace>? parkingSpaces {get;set;}

    protected override async Task OnInitializedAsync()
    {
        try
        {
            parkingSpaces = await client.GetFromJsonAsync<IEnumerable<ParkingSpace>>("/api/parking");
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    bool isActive = false;
    ParkingSpace ps;

    private void ShowInfo(ParkingSpace selectedSpace)
    {
        if (isActive && ps != selectedSpace)
        {
            ps = selectedSpace;
        }
        else
        {
            isActive = !isActive;
            ps = selectedSpace;
        }
    }
}