@page "/parking"
@inject HttpClient client

<PageTitle>Схема парковки</PageTitle>

<div style="text-align: center">
    <MudText Typo="Typo.h2">Схема парковки</MudText>
</div>


<div style="width: 400px;">
    <MudDatePicker Label="Дата" @bind-Date="selectDate" PickerClosed="OnDateChanged"></MudDatePicker>
</div>
<br />

@if (parkingInfos != null)
{
    <div class="parking-scheme">
        @foreach (var row in Rows)
        {
            <h6>Ряд</h6>
            <div class="parking-row">
                @foreach (var space in row)
                {
                    if (space.IsFree)
                        info = "free";
                    else if (space.IsOccupied)
                        info = "occupied";
                    else if (space.IsWithBooking)
                        info = "with-bookings";
                    <button class="parking-space @info" @onclick="()=>ShowInfo(space)">@space.Number</button>
                }
            </div>
        }
    </div>
}
else
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}

@if (isActive)
{

    <BookingsInfo ps="@ps" selectDate="@selectDate" />

    <br />

    <Reservation PlaceNumber="@ps.Number" />
}


@code {

    public string info;
    DateTime? selectDate = DateTime.Today;

    IEnumerable<ParkingSpace>? parkingSpaces { get; set; }
    IEnumerable<Booking> bookings { get; set; }

    List<ParkingInfo> parkingInfos = new List<ParkingInfo>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            parkingSpaces = await client.GetFromJsonAsync<IEnumerable<ParkingSpace>>("/api/parking");
            bookings = await client.GetFromJsonAsync<List<Booking>>("/api/booking");
            parkingInfos = ParkingInfo.DrawParking(parkingSpaces, bookings, selectDate);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private List<List<ParkingInfo>> Rows => parkingInfos.GroupBy(s => s.Row).Select(g => g.ToList()).ToList();



    private void OnDateChanged()
    {
        try
        {
            parkingInfos = ParkingInfo.DrawParking(parkingSpaces, bookings, selectDate);

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    bool isActive = false;
    ParkingSpace ps;

    private void ShowInfo(ParkingInfo selectedSpace)
    {
        if (isActive && ps != selectedSpace)
        {
            ps = selectedSpace;
        }
        else
        {
            isActive = !isActive;
            ps = selectedSpace;
        }
    }
}