@page "/parking/reserve"
@inject HttpClient client
@inject NavigationManager navigate

<PageTitle>Бронирование</PageTitle>

@if (Error)
{
    <h3>Проверьте правильность заполнения полей</h3>
}

<EditForm Model="@model" OnValidSubmit="@CreateBooking">
    <DataAnnotationsValidator />
    <div>
        <label>Номер места</label>
        <input @bind-value="@model.PlaceNumber" />
        <ValidationMessage For="@(()=>model.PlaceNumber)" />
    </div>

    <div>
        <label>Имя</label>
        <InputText @bind-Value="@model.Name" />
        <ValidationMessage For="@(()=>model.Name)" />
    </div>

    <div>
        <label>Фамилия</label>
        <InputText @bind-Value="@model.LastName" />
        <ValidationMessage For="@(()=>model.LastName)" />
    </div>

    <div>
        <label>Марка автомобиля</label>
        <InputText @bind-Value="@model.CarBrand" />
        <ValidationMessage For="@(()=>model.CarBrand)" />
    </div>

    <div>
        <label>Модель автомобиля</label>
        <InputText @bind-Value="@model.CarModel" />
        <ValidationMessage For="@(()=>model.CarModel)" />
    </div>

    <div>
        <label>Номер автомобиля</label>
        <InputText @bind-Value="@model.CarNumber" />
        <ValidationMessage For="@(()=>model.CarNumber)" />
    </div>

    <div>
        <label>Дата и время начала бронирования</label>
        <input type="datetime-local" @bind-value="@model.StartTime" />
        <ValidationMessage For="@(()=>model.StartTime)" />
    </div>

    <div>
        <label>Дата и время конца бронирования</label>
        <input type="datetime-local" @bind-value="@model.EndTime" />
        <ValidationMessage For="@(()=>model.EndTime)" />
    </div>

    <button type="submit">Забронировать</button>

</EditForm>

@code {

    BookingViewModel model = new BookingViewModel();

    User user { get; set; }

    bool Error { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            user = await client.GetFromJsonAsync<User>("/api/profile");
            model.Name = user.Name;
            model.LastName = user.LastName;
            model.CarBrand = user.CarBrand;
            model.CarModel = user.CarModel;
            model.CarNumber = user.CarNumber;
            model.UserName = user.UserName;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    async Task CreateBooking()
    {
        try
        {
            var result = await client.PostAsJsonAsync("api/parking", model);
            if (result.IsSuccessStatusCode)
            {
                navigate.NavigateTo("");
            }
            Error = true;

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error", ex.Message);
        }
    }
}