@page "/login"
@inject HttpClient client
@inject NavigationManager navigate
@inject ISnackbar Snackbar

<PageTitle>Авторизация</PageTitle>

<EditForm Model="@model" OnValidSubmit="@loginUser">
    <DataAnnotationsValidator />
    <div style="display: flex; justify-content: center; align-items: center; height: 100vh;">
        <MudGrid Style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
            <MudCard Style="width: 300px;">
                <MudCardHeader Style="text-align: center">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h5">Авторизация</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTextField Label="Логин" @bind-Value="model.UserName" For="@(()=>model.UserName)" />
                    <MudTextField Label="Пароль" @bind-Value="model.Password" InputType="InputType.Password" For="@(()=>model.Password)" />
                </MudCardContent> <br />
                <MudCardActions Style="justify-content: center">
                    <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Info">Авторизоваться</MudButton>
                </MudCardActions>
            </MudCard>
        </MudGrid>
    </div>
</EditForm>



@code {

    LoginViewModel model = new LoginViewModel();

    bool Error;

    async Task loginUser()
    {
        var result = await client.PostAsJsonAsync("/api/account/login", model);
        if (result.IsSuccessStatusCode)
            navigate.NavigateTo("profile");
        else
            Snackbar.Add("Неправильный логин и(или) пароль", Severity.Error);
    }
}